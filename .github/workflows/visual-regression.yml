name: Run Visual Regression Tests

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: visual-regression
  cancel-in-progress: true

jobs:
  visual-regression:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore golden images cache
        id: golden-cache
        uses: actions/cache@v4
        with:
          path: tests/golden/
          key: golden-images-main-
          restore-keys: |
            golden-images-main-

      - name: Fail if no golden images found
        if: steps.golden-cache.outputs.cache-hit != 'true'
        run: |
          echo "Error: Golden images cache for main branch not found!"
          echo "You must run 'Update Golden Images' workflow on main first."
          exit 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache Pipenv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pipenv-

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          pip install pipenv
          pipenv install --dev
          npm install --silent --no-fund --no-audit
          pipenv run playwright install && pipenv run playwright install-deps

      - name: Start app for visual regression tests
        run: |
          echo "Starting app..."
          export DEVELOPMENT_MODE=1
          pipenv run invoke update-docs
          pipenv run invoke site
          pipenv run invoke post-process
          nohup pipenv run invoke serve &
          sleep 5

      - name: Run visual regression tests (all browsers & devices)
        id: run-tests
        run: |
          set -e
          BROWSERS="chromium,firefox,webkit"
          DEVICES="desktop,mobile"

          echo "Running regression tests for browsers: $BROWSERS and devices: $DEVICES"
          IFS=',' read -ra B <<< "$BROWSERS"
          IFS=',' read -ra D <<< "$DEVICES"

          for browser in "${B[@]}"; do
            for device in "${D[@]}"; do
              echo "Running tests for $browser/$device..."
              pipenv run pytest tests/regression_test.py -m "$device and $browser" -v --tb=short || FAILED=true
            done
          done

          if [ "$FAILED" = true ]; then
            echo "Some visual tests failed."
            exit 1
          else
            echo "All visual regression tests passed."
          fi

      - name: Upload current screenshots (if failed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: current-screenshots-${{ github.run_number }}
          path: tests/current/
          retention-days: 7

      - name: Upload diff images (if failed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: diff-images-${{ github.run_number }}
          path: tests/diff/
          retention-days: 14

  summary:
    needs: visual-regression
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Create visual regression summary
        run: |
          if [ "${{ needs.visual-regression.result }}" = "failure" ]; then
            echo "# Visual Regression Tests Failed" >> $GITHUB_STEP_SUMMARY
            echo "See uploaded screenshots and diff artifacts for more details." >> $GITHUB_STEP_SUMMARY
          else
            echo "# Visual Regression Tests Passed" >> $GITHUB_STEP_SUMMARY
            echo "All browsers and devices match the golden images baseline." >> $GITHUB_STEP_SUMMARY
          fi
