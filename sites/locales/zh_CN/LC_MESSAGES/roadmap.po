# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# xinetzone <735613050@qq.com>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-08 15:55+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: xinetzone <735613050@qq.com>, 2022\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../doc/roadmap.rst:3
msgid "Nuitka Roadmap"
msgstr "Nuitka 路线图"

#: ../../doc/roadmap.rst:5
msgid "This is the Nuitka roadmap, broken down by features."
msgstr "这是Nuitka的路线图，按功能细分。"

#: ../../doc/roadmap.rst:9
msgid "User Extensibility"
msgstr "用户可扩展性"

#: ../../doc/roadmap.rst:11
msgid ""
"Data files, implicit imports are in yaml format as of 0.6.18, but even "
"DLL inclusion, and plugins location should be specified in yaml format."
msgstr ""
"从 0.6.18 开始，数据文件、隐式导入都是 yaml 格式，但即使是 DLL 的包含，"
"以及插件的位置也应该以 yaml 格式指定。"

#: ../../doc/roadmap.rst:15
msgid ""
"In this way, it becomes easier to extend by third parties. We could "
"imagine even supporting packages that provide their own configuration for"
" compilation with Nuitka through such files."
msgstr ""
"这样一来，由第三方扩展就变得更容易了。"
"我们甚至可以想象，通过这样的文件，支持那些提供自己的配置与 Nuitka 进行编译的软件包。"

#: ../../doc/roadmap.rst:19
msgid ""
"This is started with yaml config of the ``anti-bloat``, ``data-files``, "
"and ``implicit-imports`` plugin, and will extend from there."
msgstr ""
"这是从 ``anti-bloat``、``data-files`` 和 ``implicit-imports`` 插件的 yaml 配置开始的，并将从那里扩展。"

#: ../../doc/roadmap.rst:25
msgid "Standalone"
msgstr "单机版"

#: ../../doc/roadmap.rst:27
msgid "\"Multidist\" support (undecided)"
msgstr "\"多分布\" 支持（未定）"

#: ../../doc/roadmap.rst:29
msgid ""
"Allow combinining multiple main programs into one, called \"multidist\". "
"These will work with a dispatcher that decides from the binary name what "
"it is. There will be one big binary with the ability to run each program."
msgstr ""
"允许将多个主程序组合成一个，称为 \"multidist\"。"
"这些程序将与一个调度器一起工作，调度器从二进制名称中决定它是什么。"
"将会有一个大的二进制文件，能够运行每个程序。"

#: ../../doc/roadmap.rst:34
msgid ""
"The CMD file for accelerated mode, demonstrates that it's possible to "
"load the CPython DLL from another directory. We can leverage that "
"approach and produce CMD files that will call the binary in the right "
"fashion."
msgstr ""
"加速模式的 CMD 文件，展示了从另一个目录加载 CPython DLL 的可能性。"
"我们可以利用这种方法，产生 CMD 文件，以正确的方式调用二进制文件。"

#: ../../doc/roadmap.rst:39
msgid ""
"I believe we can make it so that all the scripts will still think of "
"themselves as ``__main__`` for the ``__name__`` during their execution, "
"so no code changes are needed. It's only that ``sys.argv[0]`` vs. "
"``__file__`` for location."
msgstr ""
"我相信我们可以使所有的脚本在执行过程中仍然认为自己是 ``__main__`` 的 ``__name__``，"
"所以不需要修改代码。只是 ``sys.argv[0]`` 与 ``__file__`` 的位置问题。"

#: ../../doc/roadmap.rst:44
msgid ""
"Much like for onefile, you need to distinguish program location and "
"package location in this way. Note shared stuff living near the CMD file "
"will see that CMD file path in ``sys.argv[0]`` there, and shared stuff, "
"e.g. ``xmlschema`` module will find its datafiles directory that is "
"shared."
msgstr ""
"和 onefile 很像，你需要用这种方式来区分程序位置和软件包位置。"
"注意住在 CMD 文件附近的共享东西会在 ``sys.argv[0]`` 那里看到 CMD 文件的路径，而共享的东西，"
"例如 ``xmlschema`` 模块会找到它的数据文件目录，这是共享的。"

#: ../../doc/roadmap.rst:50
msgid ""
"And to top it off, the fat binary of \"multidist\" may be in standalone "
"or onefile mode, at your choice. The disadvantage there being, that "
"onefile will be slower to unpack with a larger binary."
msgstr ""
"最重要的是，\"multidist\" 的胖二进制可以是独立的或单文件模式，由你选择。"
"其缺点是，单文件的解压速度会比较大的二进制文件要慢。"

#: ../../doc/roadmap.rst:54
msgid "\"Sharedist\" support (undecided)"
msgstr "\"Sharedist\" 支持 （未定）"

#: ../../doc/roadmap.rst:56
msgid ""
"In this the programs are not combined, rather standalone compilations are"
" resumed, produced shared and non-shared parts of multiple distributions."
msgstr ""
"在这一点上，程序没有被合并，而是恢复了独立的编译，产生了多个分布的共享和非共享部分。"

#: ../../doc/roadmap.rst:60
msgid ""
"The plugins in Nuitka are still somewhat wild west when it comes to "
"copying DLLs and data files as they see fit, sometimes, but not always, "
"reporting to the core, so it could scan dependencies. Work is being done "
"to clean them up. Some, most recently numpy, have been changed to make "
"them yield objects describing tasks and executing them in the core. This "
"way there is a chance to know what the program does and make this kind of"
" change. This transition is almost complete, but the Qt plugins are still"
" missing."
msgstr ""
"Nuitka 中的插件在复制 DLLs 和数据文件时仍然有些野蛮，有时，但不总是，向核心报告，所以它可以扫描依赖性。"
"我们正在努力清理它们。有些，最近的 numpy，已经被改变，使它们产生描述任务的对象，并在核心中执行它们。"
"这样就有机会知道程序是做什么的，并做出这种改变。这种过渡几乎已经完成，但 Qt 插件仍未完成。"

#: ../../doc/roadmap.rst:69
msgid ""
"My goal here is to say that e.g. a datafile should be what Nuitka "
"commercial currently calls \"trusted\" independent of it being a "
"datafile, right now that is not the case, but Nuitka is much closer to "
"that now. This is of course the same with multiple distributions."
msgstr ""
"我在这里的目标是说，例如一个数据文件应该是 Nuitka 商业版目前所称的 \"trusted\" ，"
"独立于它是一个数据文件，现在情况并非如此，但 Nuitka 现在更接近于此。当然，这与多个发行版的情况相同。"

#: ../../doc/roadmap.rst:74
msgid ""
"For data files, this plugin could hook the data file copying process in "
"much the same way, and put data files near the executable or in the "
"shared area."
msgstr ""
"对于数据文件，这个插件可以用大致相同的方式钩住数据文件的复制过程，并将数据文件放在可执行文件附近或共享区域。"

#: ../../doc/roadmap.rst:78
msgid ""
"Windows: Provide builds of CPython that will allow static linking, "
"avoiding the CPython DLL."
msgstr ""
"Windows：提供 CPython 的构建，允许静态链接，避免 CPython DLL。"

#: ../../doc/roadmap.rst:81
msgid "Forcing output and stderr to files should be supported for all OSes."
msgstr "强制输出和 stderr 到文件应该支持所有操作系统。"

#: ../../doc/roadmap.rst:83
msgid ""
"Dejong Stacks: More robust parser that allows stdout and stderr in same "
"file with mixed outputs."
msgstr ""
"Dejong Stacks: 更强大的解析器，允许在同一文件中的 stdout 和 stderr 混合输出。"

#: ../../doc/roadmap.rst:86
msgid ""
"Add ability to inhibit datafiles from the command line, so that things "
"coming from a plugin can be suppressed."
msgstr ""
"增加从命令行抑制数据文件的能力，这样来自插件的东西就可以被抑制。"

#: ../../doc/roadmap.rst:89
msgid "Add support for upx (public feature)"
msgstr "增加对 upx 的支持（公共功能）。"

#: ../../doc/roadmap.rst:91
msgid ""
"The UPX cannot compress payloads, which is why we can't use it and expect"
" it to solve the onefile compression issue. However, a post processing of"
" binaries, even from CPython extension modules, seems to work and reduce "
"the uncompressed sizes of binaries already."
msgstr ""
"UPX不能压缩有效载荷，这就是为什么我们不能使用它并期望它能解决单文件压缩问题。"
"然而，对二进制文件的后期处理，甚至是来自 CPython 扩展模块的二进制文件的后期处理，"
"似乎已经能够发挥作用，并减少二进制文件的未压缩尺寸。"

#: ../../doc/roadmap.rst:98
msgid "Nuitka-Python (public)"
msgstr ""

#: ../../doc/roadmap.rst:100
msgid ""
"This is currently under way and not yet described here. The current "
"Nuitka release has support for using it. Most work is focused on Linux "
"and Python2.7 now with the aim of getting it capable to statically "
"compile numpy for speed."
msgstr ""
"这一点目前正在进行中，这里还没有描述。"
"目前的 Nuitka 版本已经支持使用它。"
"大多数工作现在都集中在 Linux 和 Python2.7 上，目的是让它能够静态编译 numpy 以提高速度。"

#: ../../doc/roadmap.rst:107
msgid "Performance (public)"
msgstr ""

#: ../../doc/roadmap.rst:109
msgid ""
"Caching of demoted to bytecode modules. Some of these, e.g. "
"``pkg_resources`` take very long to analyse in Nuitka, just to find out "
"the imports. There is no point in repeating this, a caching of Python "
"compilation is a separate line of action, but it should start with this."
msgstr ""

#: ../../doc/roadmap.rst:115
msgid "Faster attribute setting."
msgstr ""

#: ../../doc/roadmap.rst:117
msgid ""
"For Python3 we still use ``_PyObjectDict_SetItem`` which is very hard to "
"replace, as it's forking shared dictionary as necessary. With static "
"libpython it can linked though, but we still might want to make our own "
"replacement."
msgstr ""

#: ../../doc/roadmap.rst:122
msgid "Support for static libpython together with LTO for Python3"
msgstr ""

#: ../../doc/roadmap.rst:124
msgid ""
"This gives an enormouse speed bump for Python2 with Debian package Python"
" and of course for any properly self compiled Python, and to the Nuitka "
"Python there will be. For Python3, this has not yet been achieved, but "
"ought to be doable too. And in some cases, it can be known to not work "
"and should not be suggested."
msgstr ""

#: ../../doc/roadmap.rst:130
msgid "Better code for ``+= 1`` constructs with lack of type knowledge."
msgstr ""

#: ../../doc/roadmap.rst:132
msgid ""
"There is a long standing todo, to add the ``CLONG`` support for binary "
"operations. It requires the code generation of Jinja to be abstract, but "
"that should have been close to being reached in last releases."
msgstr ""

#: ../../doc/roadmap.rst:137
msgid "Better code for ``+= 1`` constructs even with lack of type knowledge."
msgstr ""

#: ../../doc/roadmap.rst:139
msgid ""
"It should be possible to introduce prepared constants of ``nuitka_int`` "
"type that have the object ready for use, as well as the integer value, "
"and indicate so with the enum setting. This type, that is intended for "
"use with local variables later on, could also be supported in binary "
"operations and in-place operations, esp. for ``int``, ``float`` and "
"``long`` values."
msgstr ""

#: ../../doc/roadmap.rst:146
msgid ""
"Make module variable traces available to functions. This will be needed "
"to optimize import of ``sys`` on module level and then attribute access "
"on function level at compile time."
msgstr ""

#: ../../doc/roadmap.rst:150
msgid ""
"Implement the ``partial`` built-in and make it work with compiled "
"functions. It could prepare calls much better, such that they do not come"
" through keyword arguments unnecessarily."
msgstr ""

#: ../../doc/roadmap.rst:154
msgid ""
"Take advantage of ``list.append`` representing nodes that these are in "
"fact compile time constants and generate more efficient code for them, "
"which some of the C implementations could use, examples would be "
"``str.upper`` where we only call that cached attribute value."
msgstr ""

#: ../../doc/roadmap.rst:159
msgid ""
"Complete ``str`` built-in methods for enhanced results, esp. for compile "
"time optimization."
msgstr ""

#: ../../doc/roadmap.rst:162
msgid ""
"Add support for ``list`` methods, things like ``append`` really should be"
" optimized as well in the mostly existing operation nodes."
msgstr ""

#: ../../doc/roadmap.rst:167
msgid "macOS enhancements"
msgstr ""

#: ../../doc/roadmap.rst:169
msgid ""
"The macOS bundle mode and onefile are not yet working together, which "
"needs mainly just internal changes for where to put files. Also for "
"accelerated programs, bundle mode is not usable, so they couldn't be GUI "
"programs yet."
msgstr ""

#: ../../doc/roadmap.rst:174
msgid "Apple Python must be detected and rejected for standalone mode."
msgstr ""

#: ../../doc/roadmap.rst:178
msgid "Container Builds (commercial)"
msgstr ""

#: ../../doc/roadmap.rst:180
msgid ""
"Providing docker images like manylinux does with Nuitka installed into "
"all of them and ready to use. Might make this a free feature once it's "
"done and supports ``--commercial`` download of the plugins nicely."
msgstr ""

#: ../../doc/roadmap.rst:184
msgid ""
"Providing containers with old Linux, and optimally compiled CPython with "
"podman such that building with Nuitka on Fedora latest and Ubuntu latest "
"can be done fully automatically and still run on very old Linux. Right "
"now this is implemented, but works mostly locally and needs more work "
"than it should."
msgstr ""

#: ../../doc/roadmap.rst:192
msgid "Support for Next Python Version (3.10)"
msgstr ""

#: ../../doc/roadmap.rst:194
msgid "Get it to work for 3.9 test suite."
msgstr ""

#: ../../doc/roadmap.rst:196
msgid "The suite still needs a bit of help to run through, should be good though."
msgstr ""

#: ../../doc/roadmap.rst:198
msgid "Add support for all of the new case syntax of 3.10"
msgstr ""

#: ../../doc/roadmap.rst:200
msgid "This is partially done, but assignments in or matches do not work yet."
msgstr ""

#: ../../doc/roadmap.rst:204
msgid "Wheels Build"
msgstr ""

#: ../../doc/roadmap.rst:206
msgid ""
"Needs more documentation and addition of (some) command line options of "
"Nuitka to the ``bdist_nuitka`` target."
msgstr ""

#: ../../doc/roadmap.rst:211
msgid "Features to be added for 0.6.19"
msgstr ""

#: ../../doc/roadmap.rst:213
msgid "List of things, we are aiming for to be included in that release."
msgstr ""

#: ../../doc/roadmap.rst:215
msgid "[x] Support for Kivy 2.x to work out of the box."
msgstr ""

#: ../../doc/roadmap.rst:217
msgid "[x] Better scalability"
msgstr ""

#: ../../doc/roadmap.rst:221
msgid "Features to be added for 0.6.20"
msgstr ""

#: ../../doc/roadmap.rst:223
msgid "[ ] Better scalability"
msgstr ""

#: ../../doc/roadmap.rst:225
msgid ""
"[ ] Caching for bytecode demoted modules so no optimization needs to be "
"run."
msgstr ""

#: ../../doc/roadmap.rst:228
msgid ""
"[ ] Compression of onefile with bootstrap before Python3.5, so far it's "
"there for 3.5 or higher only."
msgstr ""

#: ../../doc/roadmap.rst:231
msgid ""
"[x] Make pydantic support the default, removing the experimental flag "
"``function-base`` with it being the default behavior."
msgstr ""

