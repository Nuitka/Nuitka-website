# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-09 23:30+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../doc/doc/api-doc.rst:3
msgid "API documentation"
msgstr ""

#: nuitka.Options:1 of
msgid "Options module"
msgstr ""

#: nuitka.Options:3 of
msgid ""
"This exposes the choices made by the user. Defaults will be applied here,"
" and some handling of defaults."
msgstr ""

#: nuitka.Options.assumeYesForDownloads nuitka.Options.getIntendedPythonArch
#: nuitka.Options.getLtoMode nuitka.Options.getMsvcVersion
#: nuitka.Options.getPythonPgoInput nuitka.Options.getWindowsProductVersion
#: nuitka.Options.getWindowsSplashScreen nuitka.Options.isClang
#: nuitka.Options.isMingw64 nuitka.Options.isOnefileMode
#: nuitka.Options.isOnefileTempDirMode nuitka.Options.isPgoMode
#: nuitka.Options.isProfile nuitka.Options.isPythonDebug
#: nuitka.Options.isPythonPgoMode nuitka.Options.isRemoveBuildDir
#: nuitka.Options.isShowInclusion nuitka.Options.isShowMemory
#: nuitka.Options.isShowProgress nuitka.Options.isShowScons
#: nuitka.Options.isStandaloneMode nuitka.Options.isUnstripped
#: nuitka.Options.isVerbose nuitka.Options.shallCreateGraph
#: nuitka.Options.shallDisableCCacheUsage
#: nuitka.Options.shallDisableConsoleWindow
#: nuitka.Options.shallDumpBuiltTreeXML nuitka.Options.shallExecuteImmediately
#: nuitka.Options.shallExplainImports nuitka.Options.shallFollowAllImports
#: nuitka.Options.shallFollowNoImports
#: nuitka.Options.shallFollowStandardLibrary nuitka.Options.shallMakeModule
#: nuitka.Options.shallNotDoExecCCompilerCall
#: nuitka.Options.shallNotStoreDependsExeCachedResults
#: nuitka.Options.shallNotUseDependsExeCachedResults
#: nuitka.Options.shallOnlyExecCCompilerCall nuitka.Options.shallRunInDebugger
#: nuitka.Options.shallTraceExecution nuitka.Options.shallUseStaticLibPython
#: nuitka.Options.shallWarnImplicitRaises nuitka.Options.shallWarnUnusualCode
#: of
msgid "Returns"
msgstr ""

#: nuitka.Options.isVerbose:1 of
msgid "bool derived from ``--verbose``"
msgstr ""

#: nuitka.Options.shallTraceExecution:1 of
msgid "bool derived from ``--trace-execution``"
msgstr ""

#: nuitka.Options.shallExecuteImmediately:1 of
msgid "bool derived from ``--run``"
msgstr ""

#: nuitka.Options.shallRunInDebugger:1 of
msgid "bool derived from ``--debug``"
msgstr ""

#: nuitka.Options.shallDumpBuiltTreeXML:1 of
msgid "bool derived from ``--xml``"
msgstr ""

#: nuitka.Options.shallOnlyExecCCompilerCall:1 of
msgid "bool derived from ``--recompile-c-only``"
msgstr ""

#: nuitka.Options.shallNotDoExecCCompilerCall:1 of
msgid "bool derived from ``--generate-c-only``"
msgstr ""

#: nuitka.Options.getFileReferenceMode:1 of
msgid ""
"*str*, one of \"runtime\", \"original\", \"frozen\", coming from "
"``--file-reference-choice``"
msgstr ""

#: nuitka.Options.getFileReferenceMode:4 nuitka.Options.isOnefileTempDirMode:5
#: nuitka.Options.shallTreatUninstalledPython:10
#: nuitka.Options.shallUseStaticLibPython:3 of
msgid "Notes:"
msgstr ""

#: nuitka.Options.getFileReferenceMode:4 of
msgid ""
"Defaults to runtime for modules and packages, as well as standalone "
"binaries, otherwise original is kept."
msgstr ""

#: nuitka.Options.shallMakeModule:1 of
msgid "bool derived from ``--module``"
msgstr ""

#: nuitka.Options.shallCreatePyiFile:1 of
msgid "*bool* = **not** ``--no-pyi-file``"
msgstr ""

#: nuitka.Options.isAllowedToReexecute:1 of
msgid "*bool* = **not** ``--must-not-re-execute``"
msgstr ""

#: nuitka.Options.shallFollowStandardLibrary:1 of
msgid "bool derived from ``--follow-stdlib``"
msgstr ""

#: nuitka.Options.shallFollowNoImports:1 of
msgid "bool derived from ``--nofollow-imports``"
msgstr ""

#: nuitka.Options.shallFollowAllImports:1 of
msgid "bool derived from ``--follow-imports``"
msgstr ""

#: nuitka.Options.getShallFollowInNoCase:1 of
msgid "*list*, items of ``--nofollow-import-to=``"
msgstr ""

#: nuitka.Options.getShallFollowModules:1 of
msgid "*list*, items of ``--follow-import-to=``"
msgstr ""

#: nuitka.Options.getShallFollowExtra:1 of
msgid "*list*, items of ``--include-plugin-directory=``"
msgstr ""

#: nuitka.Options.getShallFollowExtraFilePatterns:1 of
msgid "*list*, items of ``--include-plugin-files=``"
msgstr ""

#: nuitka.Options.getMustIncludeModules:1 of
msgid "*list*, items of ``--include-module=``"
msgstr ""

#: nuitka.Options.getMustIncludePackages:1 of
msgid "*list*, items of ``--include-package=``"
msgstr ""

#: nuitka.Options.getShallIncludePackageData:1 of
msgid "*list*, items of ``--include-package-data=``"
msgstr ""

#: nuitka.Options.getShallIncludeDataFiles:1 of
msgid "*list*, items of ``--include-data-file=``"
msgstr ""

#: nuitka.Options.getShallIncludeDataDirs:1 of
msgid "*list*, items of ``--include-data-dir=``"
msgstr ""

#: nuitka.Options.shallWarnImplicitRaises:1 of
msgid "bool derived from ``--warn-implicit-exceptions``"
msgstr ""

#: nuitka.Options.shallWarnUnusualCode:1 of
msgid "bool derived from ``--warn-unusual-code``"
msgstr ""

#: nuitka.Options.assumeYesForDownloads:1 of
msgid "bool derived from ``--assume-yes-for-downloads``"
msgstr ""

#: nuitka.Options.isPythonDebug:1 of
msgid "bool derived from ``--python-debug`` or ``sys.flags.debug``"
msgstr ""

#: nuitka.Options.isPythonDebug:3 of
msgid ""
"Passed to Scons as ``python_debug`` so it can consider it when picking "
"link libraries to choose the correct variant. Also enables the define "
"``Py_DEBUG`` for C headers. Reference counting checks and other debug "
"asserts of Python will happen in this mode."
msgstr ""

#: nuitka.Options.isUnstripped:1 of
msgid "bool derived from ``--unstripped`` or ``--profile``"
msgstr ""

#: nuitka.Options.isUnstripped:3 of
msgid ""
"A binary is called stripped when debug information is not present, an "
"unstripped when it is present. For profiling and debugging it will be "
"necessary, but it doesn*t enable debug checks like ``--debug`` does."
msgstr ""

#: nuitka.Options.isUnstripped:7 of
msgid ""
"Passed to Scons as ``unstripped_mode`` to it can ask the linker to "
"include symbol information."
msgstr ""

#: nuitka.Options.isProfile:1 of
msgid "bool derived from ``--profile``"
msgstr ""

#: nuitka.Options.shallCreateGraph:1 of
msgid "bool derived from ``--graph``"
msgstr ""

#: nuitka.Options.getOutputFilename:1 of
msgid "*str*, value of \"-o\""
msgstr ""

#: nuitka.Options.getOutputPath:1 of
msgid "Return output pathname of a given path (filename)."
msgstr ""

#: nuitka.Options.getOutputDir:1 of
msgid "*str*, value of ``--output-dir`` or \".\""
msgstr ""

#: nuitka.Options.getPositionalArgs:1 of
msgid "*tuple*, command line positional arguments"
msgstr ""

#: nuitka.Options.getMainArgs:1 of
msgid "*tuple*, arguments following the optional arguments"
msgstr ""

#: nuitka.Options.shallOptimizeStringExec:1 of
msgid "Inactive yet"
msgstr ""

#: nuitka.Options.shallClearPythonPathEnvironment:1 of
msgid "*bool* = **not** ``--execute-with-pythonpath``"
msgstr ""

#: nuitka.Options.shallUseStaticLibPython:1 of
msgid "bool derived from ``--static-libpython=yes|auto`` and not module mode"
msgstr ""

#: nuitka.Options.shallUseStaticLibPython:4 of
msgid "Currently only Anaconda on non-Windows can do this and MSYS2."
msgstr ""

#: nuitka.Options.shallTreatUninstalledPython:1 of
msgid "*bool* = derived from Python installation and modes"
msgstr ""

#: nuitka.Options.shallTreatUninstalledPython:4 of
msgid ""
"Not done for standalone mode obviously. The Python DLL will be a "
"dependency of the executable and treated that way."
msgstr ""

#: nuitka.Options.shallTreatUninstalledPython:7 of
msgid ""
"Also not done for extension modules, they are loaded with a Python "
"runtime available."
msgstr ""

#: nuitka.Options.shallTreatUninstalledPython:10 of
msgid "Most often uninstalled Python versions are self compiled or from Anaconda."
msgstr ""

#: nuitka.Options.isShowScons:1 of
msgid "bool derived from ``--show-scons``"
msgstr ""

#: nuitka.Options.getJobLimit:1 of
msgid "*int*, value of ``--jobs`` / \"-j\" or number of CPU kernels"
msgstr ""

#: nuitka.Options.getLtoMode:1 of
msgid "bool derived from ``--lto`` or ``--pgo``"
msgstr ""

#: nuitka.Options.isClang:1 of
msgid ""
"bool derived from ``--clang`` or enforced by platform, e.g. macOS or "
"FreeBSD some targets."
msgstr ""

#: nuitka.Options.isMingw64:1 of
msgid ""
"bool derived from ``--mingw64``, available only on Windows, otherwise "
"false"
msgstr ""

#: nuitka.Options.getMsvcVersion:1 of
msgid "str derived from ``--msvc`` on Windows, otherwise None"
msgstr ""

#: nuitka.Options.shallDisableCCacheUsage:1 of
msgid "bool derived from ``disable-ccache``"
msgstr ""

#: nuitka.Options.shallDisableConsoleWindow:1 of
msgid "bool derived from ``--win-disable-console or ``--macos-disable-console``"
msgstr ""

#: nuitka.Options.isShowProgress:1 of
msgid "bool derived from ``--show-progress``"
msgstr ""

#: nuitka.Options.isShowMemory:1 of
msgid "bool derived from ``--show-memory``"
msgstr ""

#: nuitka.Options.isShowInclusion:1 of
msgid "bool derived from ``--show-modules``"
msgstr ""

#: nuitka.Options.isRemoveBuildDir:1 of
msgid "bool derived from ``--remove-output``"
msgstr ""

#: nuitka.Options.getIntendedPythonArch:1 of
msgid "str, one of ``\"x86\"``, ``\"x86_64\"`` or ``None``"
msgstr ""

#: nuitka.Options.getIntendedPythonArch:3 of
msgid ""
"Notes: This is only available on Windows, on other platforms it will be "
"`None`"
msgstr ""

#: nuitka.Options.isExperimental:1 of
msgid "Check whether a given experimental feature is enabled."
msgstr ""

#: nuitka.Options.isExperimental:3 of
msgid "Args:"
msgstr ""

#: nuitka.Options.isExperimental:4 of
msgid "indication: (str) feature name"
msgstr ""

#: nuitka.Options.isExperimental:5 of
msgid "Returns:"
msgstr ""

#: nuitka.Options.isExperimental:6 of
msgid "bool"
msgstr ""

#: nuitka.Options.getExperimentalIndications:1 of
msgid "*tuple*, items of ``--experimental=``"
msgstr ""

#: nuitka.Options.shallExplainImports:1 of
msgid "bool derived from ``--explain-imports``"
msgstr ""

#: nuitka.Options.isStandaloneMode:1 of
msgid "bool derived from ``--standalone``"
msgstr ""

#: nuitka.Options.isOnefileMode:1 of
msgid "bool derived from ``--onefile``"
msgstr ""

#: nuitka.Options.isOnefileTempDirMode:1 of
msgid "bool derived from ``--onefile-tempdir`` and OS"
msgstr ""

#: nuitka.Options.isOnefileTempDirMode:4 of
msgid ""
"On all but Linux, using a bootstrap binary that does unpack is mandatory,"
" but on Linux, the AppImage tool is used by default, this enforces using "
"a bootstrap binary there too."
msgstr ""

#: nuitka.Options.isPgoMode:1 of
msgid "bool derived from ``--pgo``"
msgstr ""

#: nuitka.Options.isPythonPgoMode:1 of
msgid "bool derived from ``--pgo-python``"
msgstr ""

#: nuitka.Options.getPythonPgoInput:1 of
msgid "str derived from ``--pgo-python-input``"
msgstr ""

#: nuitka.Options.getPgoArgs:1 of
msgid "*list* = ``--pgo-args``"
msgstr ""

#: nuitka.Options.getPgoExecutable:1 of
msgid "*str* = ``--pgo-args``"
msgstr ""

#: nuitka.Options.getPythonPgoUnseenModulePolicy:1 of
msgid "*str* = ``--python-pgo-unused-module-policy``"
msgstr ""

#: nuitka.Options.getIconPaths:1 of
msgid ""
"*list of str*, values of ``--windows-icon-from-ico`` and ``--linux-"
"onefile-icon``"
msgstr ""

#: nuitka.Options.getWindowsIconExecutablePath:1 of
msgid "*str* or *None* if not given, value of ``--windows-icon-from-exe``"
msgstr ""

#: nuitka.Options.shallAskForWindowsAdminRights:1 of
msgid "*bool*, value of ``--windows-uac-admin`` or ``--windows-uac-uiaccess``"
msgstr ""

#: nuitka.Options.shallAskForWindowsUIAccessRights:1 of
msgid "*bool*, value of ``--windows-uac-uiaccess``"
msgstr ""

#: nuitka.Options.getWindowsVersionInfoStrings:1 of
msgid "*dict of str*, values of ."
msgstr ""

#: nuitka.Options.getWindowsProductVersion:1 of
msgid "tuple of 4 ints or None, derived from ``--windows-product-version``"
msgstr ""

#: nuitka.Options.getWindowsFileVersion:1 of
msgid ":returns tuple of 4 ints or None, derived from ``--windows-file-version``"
msgstr ""

#: nuitka.Options.getWindowsSplashScreen:1 of
msgid "bool derived from ``--onefile-windows-splash-screen-image``"
msgstr ""

#: nuitka.Options.getWindowsCompanyName:1 of
msgid "*str* name of the company to use"
msgstr ""

#: nuitka.Options.getWindowsProductName:1 of
msgid "*str* name of the product to use"
msgstr ""

#: nuitka.Options.shallCreateAppBundle:1 of
msgid "*bool* shall create an application bundle"
msgstr ""

#: nuitka.Options.getMacOSAppName:1 of
msgid "*str* name of the app to use bundle"
msgstr ""

#: nuitka.Options.getMacOSSignedAppName:1 of
msgid "*str* name of the app to use during signing"
msgstr ""

#: nuitka.Options.getMacOSAppVersion:1 of
msgid "*str* version of the app to use for bundle"
msgstr ""

#: nuitka.Options.hasPythonFlagNoSite:1 of
msgid "*bool* = \"no_site\" in python flags given"
msgstr ""

#: nuitka.Options.hasPythonFlagNoAnnotations:1 of
msgid "*bool* = \"no_annotations\" in python flags given"
msgstr ""

#: nuitka.Options.hasPythonFlagNoAsserts:1 of
msgid "*bool* = \"no_asserts\" in python flags given"
msgstr ""

#: nuitka.Options.hasPythonFlagNoDocstrings:1
#: nuitka.Options.hasPythonFlagNoWarnings:1 of
msgid "*bool* = \"no_docstrings\" in python flags given"
msgstr ""

#: nuitka.Options.hasPythonFlagTraceImports:1 of
msgid "*bool* = \"trace_imports\", \"-v\" in python flags given"
msgstr ""

#: nuitka.Options.hasPythonFlagNoRandomization:1 of
msgid ""
"*bool* = \"no_randomization\", \"-R\", \"static_hashes\" in python flags "
"given"
msgstr ""

#: nuitka.Options.hasPythonFlagPackageMode:1 of
msgid "*bool* = \"package_mode\", \"-m\" in python flags given"
msgstr ""

#: nuitka.Options.shallFreezeAllStdlib:1 of
msgid "*bool* = **not** shallFollowStandardLibrary"
msgstr ""

#: nuitka.Options.getWindowsDependencyTool:1 of
msgid "*str*, value of ``--windows-dependency-tool=``"
msgstr ""

#: nuitka.Options.shallNotUseDependsExeCachedResults:1 of
msgid ""
"bool derived from ``--disable-dll-dependency-cache`` or ``--force-dll-"
"dependency-cache-update``"
msgstr ""

#: nuitka.Options.shallNotStoreDependsExeCachedResults:1 of
msgid "bool derived from ``--disable-dll-dependency-cache``"
msgstr ""

#: nuitka.Options.getPluginNameConsideringRenames:1 of
msgid "Name of the plugin with renames considered."
msgstr ""

#: nuitka.Options.getPluginsEnabled:1 of
msgid "*tuple*, user enabled (standard) plugins (not including user plugins)"
msgstr ""

#: nuitka.Options.getPluginsDisabled:5 nuitka.Options.getPluginsEnabled:4 of
msgid "Note:"
msgstr ""

#: nuitka.Options.getPluginsEnabled:4 of
msgid ""
"Do not use this outside of main binary, as plugins are allowed to "
"activate plugins themselves and that will not be visible here."
msgstr ""

#: nuitka.Options.getPluginsDisabled:1 of
msgid "*tuple*, user disabled (standard) plugins."
msgstr ""

#: nuitka.Options.getPluginsDisabled:4 of
msgid ""
"Do not use this outside of main binary, as other plugins, e.g. hinted "
"compilation will activate plugins themselves and this will not be visible"
" here."
msgstr ""

#: nuitka.Options.getUserPlugins:1 of
msgid "*tuple*, items user provided of ``--user-plugin=``"
msgstr ""

#: nuitka.Options.shallDetectMissingPlugins:1 of
msgid "*bool* = **not** ``--plugin-no-detection``"
msgstr ""

#: nuitka.Options.getPythonPathForScons:1 of
msgid "*str*, value of ``--python-for-scons``"
msgstr ""

#: nuitka.Options.shallCompileWithoutBuildDirectory:1 of
msgid "*bool* currently hard coded, not when using debugger."
msgstr ""

#: nuitka.Options.shallCompileWithoutBuildDirectory:3 of
msgid ""
"When this is used, compilation is executed in a fashion that it runs "
"inside the build folder, hiding it, attempting to make results more "
"reproducible across builds of different programs."
msgstr ""

#: nuitka.Options.shallCompileWithoutBuildDirectory:7 of
msgid "TODO: Make this not hardcoded, but possible to disable via an options."
msgstr ""

#: nuitka.Options.shallPreferSourcecodeOverExtensionModules:1
#: nuitka.Options.shallUseProgressBar:1 of
msgid "*bool* prefer source code over extension modules if both are there"
msgstr ""

#: nuitka.Options.getForcedStdoutPath:1 of
msgid "*str* force program stdout output into that filename"
msgstr ""

#: nuitka.Options.getForcedStderrPath:1 of
msgid "*str* force program stderr output into that filename"
msgstr ""

#: nuitka.Options.shallPersistModifications:1 of
msgid "*bool* write plugin source changes to disk"
msgstr ""

#: nuitka.Options.isLowMemory:1 of
msgid "*bool* low memory usage requested"
msgstr ""

#: nuitka.Options.getCompilationReportFilename:1 of
msgid "*str* filename to write XML report of compilation to"
msgstr ""

#~ msgid "返回"
#~ msgstr ""

