# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Kay Hayen and Nuitka Contributors
# This file is distributed under the same license as the Nuitka the Python
# Compiler package.
# xinetzone <735613050@qq.com>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nuitka the Python Compiler \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-08 17:19+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: xinetzone <735613050@qq.com>, 2022\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../index.rst:111
msgid "Download"
msgstr "下载"

#: ../../index.rst:111
msgid "User Manual"
msgstr "用户手册"

#: ../../index.rst:117
msgid "Commercial Users"
msgstr "商务用户"

#: ../../index.rst:122
msgid "Roadmap"
msgstr "路线图"

#: ../../index.rst:122
msgid "Release Information"
msgstr "发行信息"

#: ../../index.rst:129
msgid "Developer Manual"
msgstr "开发者手册"

#: ../../index.rst:129
msgid "API doc"
msgstr "API 文档"

#: ../../index.rst:129
msgid "More documentation"
msgstr "更多文档"

#: ../../index.rst:136
msgid "Presentations"
msgstr "演讲稿"

#: ../../index.rst:136
msgid "Streaming"
msgstr "流媒体"

#: ../../index.rst:136
msgid "Media"
msgstr "媒体"

#: ../../index.rst:142
msgid "Other"
msgstr "其他"

#: ../../index.rst:148
msgid "Under construction"
msgstr "建设中"

#: ../../index.rst:3
msgid "Nuitka the Python Compiler"
msgstr "Python 编译器 Nuitka"

#: ../../index.rst:7
msgid "Nuitka Blog"
msgstr "博文"

#: ../../index.rst:14
msgid "What is Nuitka"
msgstr "Nuitka 是什么"

#: ../../index.rst:16
msgid "Nuitka is a Python compiler written in Python."
msgstr "Nuitka 是一个用 Python 编写的 Python 编译器。"

#: ../../index.rst:18
msgid "It is fully compatible with Python2 (2.6, 2.7) and Python3 (3.3 - 3.10)."
msgstr "它与 Python2（2.6，2.7）和 Python3（3.3 - 3.10）完全兼容。"

#: ../../index.rst:20
msgid ""
"You feed Nuitka your Python app, it does a lot of clever things, and then"
" creates an executable or extension module, or even a Python wheel."
msgstr "你给 Nuitka 提供你的 Python 应用程序，它做了很多智能的事情，然后创建一个可执行文件或扩展模块，甚至是一个 Python 轮子。"

#: ../../index.rst:23
msgid ""
"Nuitka is distributed under the Apache license. Nuitka commercial is a "
"private repository that you pay to access and get plugins for commercial "
"usage."
msgstr "Nuitka 是在 Apache 许可下发布的。Nuitka 商业版是一个私人仓库，你可以付费访问并获得商业用途的插件。"

#: ../../index.rst:28
msgid "Okay I'm hooked! Tell me more!"
msgstr "好吧，我被迷住了! 告诉我更多！"

#: ../../index.rst:31
msgid "Now"
msgstr "现在"

#: ../../index.rst:33
msgid ""
"Right now Nuitka is a good replacement for the Python interpreter. It "
"compiles **every** language construct in all relevant CPython versions, "
"and even the irrelevant ones like 2.6 and 3.3. It translates Python into "
"a C program that then is linked against libpython to execute exactly like"
" CPython. It is extremely compatible."
msgstr ""
"现在，Nuitka 是 Python 解释器的一个很好的替代品。它可以编译所有相关 CPython 版本中的语言结构，甚至是不相关的版本，如 "
"2.6 和 3.3。它将 Python 翻译成 C 语言程序，然后与 libpython 连接，执行起来与 CPython "
"完全一样。它的兼容性非常好。"

#: ../../index.rst:39
#, python-format
msgid ""
"Nuitka is already slightly faster than CPython, but there is work to be "
"done to include as many C optimizations as possible. We currently get a "
"335% speedup in pystone, which is a good start. (source: Nuitka version "
"0.6.17 with Debian Python 2.7)"
msgstr ""
"Nuitka 已经比 CPython 略快了，但还有工作要做，以包括尽可能多的 C 优化。我们目前在 pystone 中得到了 335% "
"的速度提升，这是一个好的开始。（来源：Nuitka 0.6.17 版与 Debian Python 2.7）"

#: ../../index.rst:45
msgid "Future"
msgstr "未来"

#: ../../index.rst:47
msgid ""
"In the future Nuitka will be able to use type inferencing based on whole "
"program analysis. It will apply that information in order to perform as "
"many calculations as possible in C, using C native types, without "
"accessing ``libpython``."
msgstr ""
"在未来，Nuitka 将能够使用基于整个程序分析的类型推理。它将应用这些信息，以便在 C 语言中尽可能多地进行计算，使用 C "
"语言的原生类型，而无需访问 ``libpython``。"

#: ../../index.rst:52
msgid ""
"Nuitka will also be able to integrate ``ctypes`` bindings, but without "
"the usual speed penalty. The compiled program can call the C library "
"directly, avoiding run-time overhead."
msgstr "Nuitka 也将能够整合 ``ctypes`` 绑定，但没有通常的速度损失。编译后的程序可以直接调用 C 库，避免了运行时的开销。"

#: ../../index.rst:56
msgid ""
"And finally, you will be able to use a ``hints`` module to inform Nuitka "
"about type information."
msgstr "最后，你将能够使用一个 ``hints`` 模块来通知 Nuitka 关于类型信息。"

#: ../../index.rst:60
msgid "Now vs. Future, or, The Plan"
msgstr "现在与未来，或者，计划"

#: ../../index.rst:62
msgid "These are the milestones and priorities for Nuitka's development."
msgstr "这些是 Nuitka 发展的里程碑和重点。"

#: ../../index.rst:64
msgid ""
"Total feature parity with Python. Understand all language constructs, and"
" behave exactly like CPython."
msgstr "与 Python 的功能完全对等。理解所有的语言结构，其行为与 CPython 完全一样。"

#: ../../index.rst:67
msgid ""
"Create the most efficient native C code possible. The goal is to make "
"basic Python object handling as fast as possible."
msgstr "尽可能创建最有效的原生 C 代码。目标是使基本的 Python 对象处理尽可能快。"

#: ../../index.rst:70
msgid ""
"Implement constant propagation. Determine as many values and useful "
"constraints as possible at compile time, and create extremely efficient "
"code for the compiler."
msgstr "constant 传播 实现。在编译时确定尽可能多的值和有用的约束，为编译器创建极其有效的代码。"

#: ../../index.rst:74
msgid ""
"Make intelligent type inferences. Detect and use special case handling "
"for strings, integers, and lists in the compiled program."
msgstr "进行智能类型推断。检测并使用编译程序中对字符串、整数和列表的特殊情况处理。"

#: ../../index.rst:77
msgid ""
"Add interfacing with C code to allow Nuitka to turn Python ``ctypes`` "
"bindings into efficient C bindings."
msgstr "增加与 C 代码的接口，让 Nuitka 把 Python 的 ``ctypes`` 绑定变成高效的 C 绑定。"

#: ../../index.rst:80
msgid ""
"Provide a hints module with a useful Python implementation so the "
"compiler can learn about intended types directly from the programmer."
msgstr "提供一个带有有用的 Python 实现的提示模块，这样编译器就可以直接从程序员那里了解到预定的类型。"

#: ../../index.rst:84
msgid "Where are we now?"
msgstr "我们现在在哪里？"

#: ../../index.rst:86
msgid ""
"Milestone 1, feature parity, has been achieved for Python 2.6, 2.7, and "
"3.3 up to 3.10. This part of Nuitka is already mature, but every new "
"Python release has lots of new features to add!"
msgstr ""
"里程碑1，功能平价，在 Python 2.6、2.7 和 3.3 直至 3.10 中已经实现。Nuitka 的这一部分已经很成熟了，但是每一个新的"
" Python 版本都有很多新的功能需要添加！"

#: ../../index.rst:90
msgid ""
"Milestone 2 is always a work in progress, but it has been quite "
"successful. Nuitka can already produce code that is more than 2 times "
"faster than CPython. These gains are nowhere near the best gains "
"possible, but they are solid improvements and will improve further."
msgstr ""
"里程碑 2 始终是一项正在进行的工作，但它已经相当成功。Nuitka 已经可以产生比 CPython 快 2 "
"倍以上的代码。这些收益远未达到最佳收益，但它们是坚实的改进，并将进一步提高。"

#: ../../index.rst:95
msgid ""
"Milestone 3, constant folding and propagation, is already in place, and "
"some control flow optimizations are also applied - but this is just the "
"start. Constant folding will see big gains as the type inferencing "
"matures and more variables are opened up to become constants."
msgstr ""
"里程碑3，常量折叠和传播（constant folding and propagation），已经到位，一些控制流优化也被应用 —— "
"但这只是开始。随着类型推理的成熟和更多的变量被开放成为常量，常量折叠将看到巨大的收益。"

#: ../../index.rst:100
msgid ""
"For milestone 4 the first steps are in place achieve type inferencing. "
"The results are encouraging, but it will need a lot more work before this"
" can be made the default approach. Remember that this is still Python, "
"Nuitka cannot be guaranteed to perfectly guess type information."
msgstr ""
"对于里程碑 4，第一步已经到位，实现了类型推断。结果是令人鼓舞的，但在使其成为默认方法之前，还需要做很多工作。记住，这仍然是 "
"Python，Nuitka 不能保证完美地猜测类型信息。"

#: ../../index.rst:105
msgid ""
"We have yet to start on milestones 5 and 6. There is still quite a way to"
" go until we hit the \"future\"."
msgstr "我们还没有开始进行里程碑5和6。在我们达到 \"未来\" 之前，还有相当长的路要走。"

#: ../../index.rst:108
msgid ""
"In the meantime you can find its `latest version here "
"</pages/download.html>`_."
msgstr "与此同时，你可以在这里找到它的 `最新版本 </pages/download.html>`_。"

